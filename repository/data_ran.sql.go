// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: data_ran.sql

package repository

import (
	"context"
)

const getAllByLevel = `-- name: GetAllByLevel :many
SELECT date, level, level_name, reference_name, ioh_data_traffic_4g, availability, eut, cqi, prb, accesibility, s1_sr, erab_drop, rrc_sr, erab_sr, inter_freq, intra_freq, irat_hosr, ul_rssi, se_dl, csfb_prep_sr, csfb_sr, ioh_volte_traffic_4g, rank_2_mimo FROM bh_data_level
WHERE ` + "`" + `level` + "`" + ` = ?
ORDER BY level_name asc
`

func (q *Queries) GetAllByLevel(ctx context.Context, level string) ([]BhDataLevel, error) {
	rows, err := q.db.QueryContext(ctx, getAllByLevel, level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BhDataLevel{}
	for rows.Next() {
		var i BhDataLevel
		if err := rows.Scan(
			&i.Date,
			&i.Level,
			&i.LevelName,
			&i.ReferenceName,
			&i.IohDataTraffic4g,
			&i.Availability,
			&i.Eut,
			&i.Cqi,
			&i.Prb,
			&i.Accesibility,
			&i.S1Sr,
			&i.ErabDrop,
			&i.RrcSr,
			&i.ErabSr,
			&i.InterFreq,
			&i.IntraFreq,
			&i.IratHosr,
			&i.UlRssi,
			&i.SeDl,
			&i.CsfbPrepSr,
			&i.CsfbSr,
			&i.IohVolteTraffic4g,
			&i.Rank2Mimo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByLevelAndName = `-- name: GetByLevelAndName :many
SELECT date, level, level_name, reference_name, ioh_data_traffic_4g, availability, eut, cqi, prb, accesibility, s1_sr, erab_drop, rrc_sr, erab_sr, inter_freq, intra_freq, irat_hosr, ul_rssi, se_dl, csfb_prep_sr, csfb_sr, ioh_volte_traffic_4g, rank_2_mimo FROM bh_data_level
WHERE ` + "`" + `level` + "`" + ` = ? AND level_name = ?
ORDER BY level_name asc
`

type GetByLevelAndNameParams struct {
	Level     string `json:"level"`
	LevelName string `json:"level_name"`
}

func (q *Queries) GetByLevelAndName(ctx context.Context, arg GetByLevelAndNameParams) ([]BhDataLevel, error) {
	rows, err := q.db.QueryContext(ctx, getByLevelAndName, arg.Level, arg.LevelName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BhDataLevel{}
	for rows.Next() {
		var i BhDataLevel
		if err := rows.Scan(
			&i.Date,
			&i.Level,
			&i.LevelName,
			&i.ReferenceName,
			&i.IohDataTraffic4g,
			&i.Availability,
			&i.Eut,
			&i.Cqi,
			&i.Prb,
			&i.Accesibility,
			&i.S1Sr,
			&i.ErabDrop,
			&i.RrcSr,
			&i.ErabSr,
			&i.InterFreq,
			&i.IntraFreq,
			&i.IratHosr,
			&i.UlRssi,
			&i.SeDl,
			&i.CsfbPrepSr,
			&i.CsfbSr,
			&i.IohVolteTraffic4g,
			&i.Rank2Mimo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByLevelAndReference = `-- name: GetByLevelAndReference :many
SELECT date, level, level_name, reference_name, ioh_data_traffic_4g, availability, eut, cqi, prb, accesibility, s1_sr, erab_drop, rrc_sr, erab_sr, inter_freq, intra_freq, irat_hosr, ul_rssi, se_dl, csfb_prep_sr, csfb_sr, ioh_volte_traffic_4g, rank_2_mimo FROM bh_data_level
WHERE ` + "`" + `level` + "`" + ` = ? AND reference_name = ?
ORDER BY level_name asc
`

type GetByLevelAndReferenceParams struct {
	Level         string `json:"level"`
	ReferenceName string `json:"reference_name"`
}

func (q *Queries) GetByLevelAndReference(ctx context.Context, arg GetByLevelAndReferenceParams) ([]BhDataLevel, error) {
	rows, err := q.db.QueryContext(ctx, getByLevelAndReference, arg.Level, arg.ReferenceName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BhDataLevel{}
	for rows.Next() {
		var i BhDataLevel
		if err := rows.Scan(
			&i.Date,
			&i.Level,
			&i.LevelName,
			&i.ReferenceName,
			&i.IohDataTraffic4g,
			&i.Availability,
			&i.Eut,
			&i.Cqi,
			&i.Prb,
			&i.Accesibility,
			&i.S1Sr,
			&i.ErabDrop,
			&i.RrcSr,
			&i.ErabSr,
			&i.InterFreq,
			&i.IntraFreq,
			&i.IratHosr,
			&i.UlRssi,
			&i.SeDl,
			&i.CsfbPrepSr,
			&i.CsfbSr,
			&i.IohVolteTraffic4g,
			&i.Rank2Mimo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDistinctNamesByLevel = `-- name: ListDistinctNamesByLevel :many
SELECT DISTINCT(level_name) FROM bh_data_level
WHERE ` + "`" + `level` + "`" + ` = ?
ORDER BY level_name asc
`

func (q *Queries) ListDistinctNamesByLevel(ctx context.Context, level string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listDistinctNamesByLevel, level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var level_name string
		if err := rows.Scan(&level_name); err != nil {
			return nil, err
		}
		items = append(items, level_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
